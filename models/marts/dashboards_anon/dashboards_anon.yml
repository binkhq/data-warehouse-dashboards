version: 2

# This is a key file for:
#   - documenting the output fields
#   - applying final post-transform tests

models:


  - name: Fact_Sales
    description: High-level data on sales
    ## description: '{{ doc("description_example") }}'  # you could reference a description entered into docs.md instead
    config:
      tags:
        - hourly   # This is a tag that can be used to filter an action - e.g. process everything with tag 'daily'
    # Add table-level tests
    tests:
      # Check that the row count is the same as for the transformation table
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: ref("stg_dbt_template__sales")
          factor: 1 # (Optional)
      # Check that sales lines values add up to the salevalue in sales table
      - saletotal_equals_salelinetotal:
          SaleLineTable: ref("Fact_SaleLines")
    columns:
      - name: sale_id
        description: The primary key for this table
        tests:
          - unique
          - not_null
      - name: sale_datetime
        description: Date and time of the transaction
        tests:
          - not_null
      - name: customer_id
        description: Links to Dim_Customer
        tests:
          - not_null
      - name: sale_lines
        description: Number of line-items in the transation
        tests:
          - not_null
      - name: sale_value
        description: Total value of the transaction
        tests:
          - not_null


  - name: Fact_SaleLines
    description: Detailed data on sales, including overall transation details and line info.
    config:
      tags:
        - hourly   # This is a tag that can be used to filter an action - e.g. process everything with tag 'daily'
    # Add table-level tests
    tests:
      # dbt_utils test to find uniqueness of a composite key
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - sale_id
            - sale_line_no
      # Check that the row count is the same as for the transformation table
      - dbt_expectations.expect_table_row_count_to_equal_other_table:
          compare_model: ref("stg_dbt_template__salelines")
          factor: 1
      # Check that the distinct count of the lines is the same as the count for the sales
      - dbt_expectations.expect_column_distinct_count_to_equal_other_table:
          column_name: sale_id
          compare_model: ref("Fact_Sales")
          compare_column_name: sale_id
      # Check that the line value is greater than or equal to the unit price
      - dbt_expectations.expect_column_pair_values_A_to_be_greater_than_B:
          column_A: line_value
          column_B: unit_price
          or_equal: True
    columns:
      - name: sale_id
        description: One part of a composite primary key for this table
        tests:
          - not_null
      - name: sale_datetime
        description: Date and time of the transaction
        tests:
          - not_null
      - name: customer_id
        description: Links to Dim_Customer
        tests:
          - not_null
      - name: sale_value
        description: Total value of the transaction
        tests:
          - not_null

      - name: sale_line_no
        description: Sale line number (1, 2, 3, etc.)
        tests:
          - not_null
      - name: product_id
        description: Links to Dim_Product
        tests:
          - not_null
      - name: quantity
        description: Number of items purchased on this line
        tests:
          - not_null
      - name: unit_price
        description: Price paid for one item
        tests:
          - not_null
      - name: line_value
        description: Total value of the sale line (Quantity * UnitPrice)
        tests:
          - not_null
